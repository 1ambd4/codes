#include <iostream>
#include <vector>

using namespace std;


// 哈希算法的应用
// 5.负载均衡
//   用哈希表替代映射表，实现会话沾滞的负载均衡策略。
// 6.数据分片
//   a)统计搜索关键词的出现次数
//         1TB的文件中存储着用户搜索关键词，如何快速统计每个搜索词的出现次数？
//         文件过大，没办法放到一台机器的内存中，即使可以，时间开销也会很大。
//         处理思路：
//             对数据分片，采用多台机器同时处理。
//             假使有n台机器，从文件中依次读出每个搜索关键词，使用构造好的哈希函数计算哈希值，
//             然后用哈希值对n取模，得到被分配到的机器的编号。最后合并起来就是最终的结果。
//   b)快速判断图片是否在图库中
//         和上面搜索关键词的处理思路相似。
// 7.分布式存储
//   分布式存储中，若也借助哈希值取模确定应该存储到的缓存器编号的话，
//   当数据量增大，现有机器无法满足需求，要进行扩容的时候，
//   取模运算的性质会使得已有缓存数据全部失效，所有的数据请求都会穿透缓存，直接请求数据库。
//   因而出现了一致性哈希算法。
//   假设有k台机器，数据的哈希值范围是[0,MAX]，将整个范围划分成m个小区间（m远大于k），
//   每台机器负责m/k个区间。
//   当有新机器加入的时候，只需将某几个小区间的数据，从原来的机器中搬移到新机器中即可。


int main()
{
    return 0;
}

