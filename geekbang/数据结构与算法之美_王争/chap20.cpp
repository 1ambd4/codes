#include <iostream>
#include <vector>

using namespace std;

// 散列表和链表的组合
//
// 散列表支持快速高效的插入、删除、查找操作，但经过散列函数后的数据在散列表中是无规律存储的
// 因而无法实现按照某种顺序来遍历数据
// 因而将散列表与链表结合在一起使用
//
//
// 散列表搭配双向链表可以将LRU缓存的时间复杂度降低位O(1)
// 缓存系统主要包括增、删、查三个操作
// 在之前章节实现的LRU缓存中，查找操作是性能瓶颈，只能做到O(n)
// 用散列表后，降至O(1)
// 显然增删查都被降到了O(1)

int main()
{
    return 0;
}

